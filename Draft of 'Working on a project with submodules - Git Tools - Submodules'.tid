created: 20221106231823764
draft.of: Working on a project with submodules - Git Tools - Submodules
draft.title: Working on a project with submodules - Git Tools - Submodules
modified: 20221106233209589
tags: [[Git Tools - Submodules]]
title: Draft of 'Working on a project with submodules - Git Tools - Submodules'
type: text/vnd.tiddlywiki

!!Working on a Project with Submodules

Now we have a copy of the project with submodules in it and will collaborate with our teammates on both the main project and the submodule project.

!!!Pulling in Upstream Changes from the Submodule Remote

The simplest model of using submodules in a project would be if you were simply consuming a subproject and wanted to get updates from it from time to time but were not actually modifying anything in your checkout.  Let's walk through a simple example there.

If you want to check for new work in a submodule, you can go into the directory and run `git fetch` and `git merge` the upstream branch with the local code.

```
$ git fetch
From https://github.com/chanonic/DbConnector
 c3f01dc..d0354fc  master     -> origin/master
$ git merge origin/master
Updating c3f01dc..d0354fc
Fast-foward
 scripts/connect.sh | 1 +
 src/db.c           | 1 +
 2 files changed, 2 insertions(+)
```

Now if you go back into the main project and run `git diff --submodule` you can see that the submodule was updated and get a list of commits that were added to it. If you don't want to type `--submodule` every time you run `git diff`, you can set it as the default format by setting the `diff.submodule` config value to `log`.

```
$ git config --global diff.submodule log
$ git diff
Submodule DbConnector c3f01dc..d0354fc:
  > more efficient db routine
  > better connection routine
```

If you commit at this point you will lock the submodule into having the new code when the other people update.

---

There is an easier way to do this as well, if you prefer to not manually `fetch` and `merge` in the subdirectory.  If you run `git submodule update --remote`, git will go into your submodules and update for you.

```
$ git submodule update --remote DbConnector
remote: Counting object: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking object: 100% (4/4), done.
from https://github.com/chaconic/DbConnector
   3f19983..d0354fc master   -> origin master
Submodule path 'DbConnector' check out 'd0354fc054692d3906c85c3af05ddce39a1c0644'
```

This command will by default assume that you want to update the checkout to the default branch of the remote submodule repository (the one pointed to by `HEAD` on the remote).  You can however, set this to something different if you want.  For example, if you want to have the `DbConnector` submodule track that repository's `stable` branch, you can set it in either your `.gitmodules` file (so everyone else also tracks it) or just in your `.git/config` file.  Let's set it in the `.gitmodules` file:

```
$ git config -f .gitmodules submodule.DbConnector.branch stable

$ git submodule update --remote
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects 100% (4/4), done.
From https://github.com/chaconic/DbConnector
   27cf5d3..c87d55d  stable -> origin/stable
Submodule path 'DbConnector': checked out 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687'
```

If you leave off the  `-f .gitmodules` it will only make the change for you, but it probably makes more sense to track that information 