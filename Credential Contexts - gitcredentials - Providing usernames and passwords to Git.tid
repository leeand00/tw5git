created: 20220109211311149
creator: aleer
modified: 20220109211312421
modifier: aleer
tags: [[AVOIDING REPETITION - gitcredentials - Providing usernames and passwords to Git]]
title: Credential Contexts - gitcredentials - Providing usernames and passwords to Git
type: text/vnd.tiddlywiki

!Credential Contexts

Git considers each credential to have a context defined by a URL.  This context is used to look up context-specific configuration, and is passed to any [[Helpers|Credential Helpers]], which may use it as an index into [[secure storage|Secure Storage]].

For instance, imagine we are accessing `https://example.com/foo.git`.  When Git looks into a config file to see if a section matches this [[context|Credential Context]], it will consider the two a match if the [[context|Credential Context]] is more-specific subset of the pattern in the config file.  For example, if you have this in your config file:

```
[credential "https://example.com"]
              username = foo
``` 

then we will match: both protocols are the same, both hosts are the same, and the "pattern" URL does not care about the path component at all.  However, this context would not match:

```
[credential "https://kernel.org"]
              username = foo
``` 

because the hostnames differ.  Nor would it match `foo.example.com`; Git compares hostnames exactly, without considering whether two hosts are part of the same domain.  

Likewise, a config entry for `http://example.com` would not match: Git compares the protocols exactly.  

However, you may use wildcards in the domain name and other pattern matching techniques as with the `http.<url>.*` options.

If the "pattern" URL does include a path component, then this too must match exactly: the context `https://example.com/bar/baz.git` will match a config entry for `https://example.com/bar/baz.git` (in addition to matching the config entry for `https://example.com`) but will not match a config entry for `https://example.com/bar`.