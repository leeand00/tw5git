created: 20200514190940982
creator: aleer
draft.of: Git Tools - Submodules
draft.title: Git Tools - Submodules
modified: 20200514211501952
modifier: aleer
tags: documentation
title: Draft of 'Git Tools - Submodules' by aleer
type: text/vnd.tiddlywiki

[[link|https://git-scm.com/book/en/v2/Git-Tools-Submodules]]

>''NOTE:'' I started reading this because I determined that this would be important for correctly storing my .dotfiles checkout for multiple projects that might have related settings; or for something like fwknopd where there is a server configuration and a client configuration, but the two go together and would need to be checked out in the same change sets for each when they were both in that state in order to work correctly.

!Git Tools - Submodules

It often happens that while working on one project, you need to use another project from within it.  Perhaps it's a library that a third party developed or that you're developing separately and using in multiple parent projects.  A common issue arises in these scenarios:

*You want to be able to treat two projects as separate, yet still be able to use one from within the other.

''Example:''

Here's an example.   Suppose you're developing a website and creating Atom feeds.  Instead of writing your own Atom-generating code, you decide to use a library.  You're likely to have to either include this code from a shared library like a CPAN install or Ruby gem, or copy the source code into your own project tree.  The issue with including the library is that it's difficult to customize the library in any way and often more difficult to deploy it, because you need to make sure every client has the library available.  The issue with copying the code into your own project is that any custom changes you make are difficult to merge when upstream changes become available.

Git addresses this issue using submodules.  Submodules allow you to keep a git repository as a sub-directory of another git repository.  This lets you clone another repository into your project and keep your commits separate.

''Starting with Submodules''

We'll walk through developing a simple project that has been split up into a main project and a few sub-projects.

Let's start by adding an existing git repository as a submodule of the repository that we're working on.  To add a new submodule you use the `git submodule add` command with the absolute or relative URL of the project you would like to start tracking.  

Let's start by adding an existing git repository as a submodule

