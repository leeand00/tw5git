created: 20240202001335853
draft.of: New Tiddler 3
draft.title: Learn Git-Grep to Boost Your Command Line Search
modified: 20240202175759712
tags: article
title: Draft of 'New Tiddler 3'
type: text/vnd.tiddlywiki

!Learn Git-Grep to Boost Your Command Line Search

[[link|https://irian.to/blogs/learn-git-grep-to-boost-your-command-line-search/]]

//September 4, 2019//

When searching for contents inside files from command-line, we probably think of `find` and `grep`, but how many of us have heard about `git grep`?

When searching inside your work tree, I found it more convenient than find/grep.  Here is how you can get started with git-grep today!

!!Things to know

Git grep searches inside project with git.  The only requirement is the project needs to be tracked (''hint:'' `git add .`).  It will work without having to commit it.

!!Let's git greppin'

The pattern is very simple.  Do `git grep {pattern}` anywhere inside your project directory.

*To search for `foo`:

```
git grep foo
```

---

Here are other useful variants:

---

*Search with line number:

```
git grep -n foo
```
---

*Returning only file name:

```
git grep -l foo
```

---

*It is regex-compatible.

```
git grep "f[^\s]*\s"
```

---

*Get a count of matches within a file:

```
git grep -c foo
```

---

*To only look under certain file extension (ignore matches from other files)

```
git grep foo *.js
```
---

!!And / Or

---

*To search for "foo" or "bar", we can do:

```
git grep -e foo -e bar
```

---

*To search for a file containing "foo" //and// "bar" and they are on the same line:

```
git grep -e foo --and -e bar
```

---

To search for a file containing "foo" //and// "bar", not necessarily on the same line:

```
git grep --all-match -e foo -e bar
```